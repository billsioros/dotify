{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Example Usage \u00a4 >>> from dotify import Dotify , Track >>> with Dotify ( SPOTIFY_ID , SPOTIFY_SECRET ): >>> result = next ( Track . search ( \"SAINt JHN 5 Thousand Singles\" , limit = 1 )) >>> result < Track \"SAINt JHN - 5 Thousand Singles\" > >>> result . url 'https://open.spotify.com/track/0fFWxRZGKR7HDW2xBMOZgW' >>> result . download ( \"SAINt JHN - 5 Thousand Singles.mp3\" ) PosixPath ( 'SAINt JHN - 5 Thousand Singles.mp3' ) Feel free to check the examples folder for more use cases! Features \u00a4 Searching for Tracks Playlists Albums Downloading Tracks Playlists Albums Documentation \u00a4 The project's documentation can be found here . Installation \u00a4 pip install dotify Supporting the project \u00a4 Feel free to Buy me a coffee! \u2615 . Contributing \u00a4 If you would like to contribute to the project, please go through the Contributing Guidelines first. Contributors \u2728 \u00a4 Thanks goes to these wonderful people ( emoji key ): Vasilis Sioros \ud83d\udea7 \ud83d\udcc6 \ud83d\udcd6 This project follows the all-contributors specification. Contributions of any kind welcome!","title":"Overview"},{"location":"#example-usage","text":">>> from dotify import Dotify , Track >>> with Dotify ( SPOTIFY_ID , SPOTIFY_SECRET ): >>> result = next ( Track . search ( \"SAINt JHN 5 Thousand Singles\" , limit = 1 )) >>> result < Track \"SAINt JHN - 5 Thousand Singles\" > >>> result . url 'https://open.spotify.com/track/0fFWxRZGKR7HDW2xBMOZgW' >>> result . download ( \"SAINt JHN - 5 Thousand Singles.mp3\" ) PosixPath ( 'SAINt JHN - 5 Thousand Singles.mp3' ) Feel free to check the examples folder for more use cases!","title":"Example Usage"},{"location":"#features","text":"Searching for Tracks Playlists Albums Downloading Tracks Playlists Albums","title":"Features"},{"location":"#documentation","text":"The project's documentation can be found here .","title":"Documentation"},{"location":"#installation","text":"pip install dotify","title":"Installation"},{"location":"#supporting-the-project","text":"Feel free to Buy me a coffee! \u2615 .","title":"Supporting the project"},{"location":"#contributing","text":"If you would like to contribute to the project, please go through the Contributing Guidelines first.","title":"Contributing"},{"location":"#contributors","text":"Thanks goes to these wonderful people ( emoji key ): Vasilis Sioros \ud83d\udea7 \ud83d\udcc6 \ud83d\udcd6 This project follows the all-contributors specification. Contributions of any kind welcome!","title":"Contributors \u2728"},{"location":"CHANGELOG/","text":"Changelog \u00a4 All notable changes to this project will be documented in this file. This project adheres to Semantic Versioning . See Conventional Commits for commit guidelines. v2.0.0 (2021-06-25) \u00a4 Feature \u00a4 Auto-populate the Json meta ( 2af3ad2 ) Fix \u00a4 Do not re-raise ValidationError when setting an attribute of JsonSerializable ( 5a039c5 ) Breaking \u00a4 auto-populate the Json meta ( 2af3ad2 ) Documentation \u00a4 Fix broken links due to multiple versions ( 21f934b ) Change accent color to teal ( cb96481 ) See all commits in this version v1.1.0 (2021-06-17) \u00a4 Feature \u00a4 Client retrieve credentials from env ( d5f52e7 ) Documentation \u00a4 Multiple versions via mike ( a6cdd45 ) Add Documentation url to PyPI page ( 7b7389d ) Fix broken link to features section ( 07cf730 ) Fix broken links ( 1e54c48 ) Uppercase CHANGELOG.md and LICENSE.md ( 592be6e ) See all commits in this version v1.0.0 (2021-06-09) \u00a4 Fix \u00a4 Convert Album.cover to a cached_property ( 6777ad3 ) Breaking \u00a4 convert internal modules into protected ( b7bc5a8 ) Documentation \u00a4 Correctly indent nested lists in .md files ( 5caa257 ) Add Playlist documentation ( 44d961d ) Add Album documentation ( 7cbf3bc ) Add Track documentation ( 29c48a1 ) Fix codeclimate urls ( c42a775 ) Model.context do not throw TypeError during mkdocs build ( da80a51 ) See all commits in this version v0.3.9 (2021-05-31) \u00a4 Fix \u00a4 Raise NotFound instead of HTTPError ( e4c83da ) Documentation \u00a4 Uppercase filenames ( b679f5b ) Remove folder references ( e699080 ) Fix broken urls ( 66c7f12 ) README.md: Center aligned badges ( 4539453 ) logo.png: Enlarged ( f9e939d ) CONTRIBUTING.md: Removed toc ( 4ebb5f9 ) Added license ( 637bbc2 ) Added contributing ( d2bed00 ) Added code of conduct ( de0bcfe ) Added changelog ( dfe478d ) Added logo ( 43eec65 ) CONTRIBUTING.md: Mentioning examples ( aa16fcf ) CONTRIBUTING.md: Added pyenv section in testing with tox ( 6986af0 ) tests: Added a README ( 437ee1f ) Create .all-contributorsrc [skip ci] ( 043e974 ) Update README.md [skip ci] ( 0847fd3 ) mkdocs.yml: Corrected edit_uri ( 491a49b ) See all commits in this version v0.3.8 (2021-05-01) \u00a4 Fix \u00a4 model.py: context now does not throw ( 82f93d9 ) Documentation \u00a4 README.md: Added docs link & badge ( 42d4abe ) See all commits in this version v0.3.5 (2021-04-27) \u00a4 Fix \u00a4 publish.yml: Publishing via another gh-action ( 8487eb7 ) See all commits in this version v0.1.5 (2021-04-17) \u00a4 Feature \u00a4 Enabled automatic releases via GitHub Actions Enabled automatic Changelog generation via GitHub Actions See all commits in this version v0.1.4 (2021-04-17) \u00a4 \ud83c\udf82\ud83c\udf89 Initial Release \ud83c\udf82\ud83c\udf89","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. This project adheres to Semantic Versioning . See Conventional Commits for commit guidelines.","title":"Changelog"},{"location":"CHANGELOG/#v200-2021-06-25","text":"","title":"v2.0.0 (2021-06-25)"},{"location":"CHANGELOG/#feature","text":"Auto-populate the Json meta ( 2af3ad2 )","title":"Feature"},{"location":"CHANGELOG/#fix","text":"Do not re-raise ValidationError when setting an attribute of JsonSerializable ( 5a039c5 )","title":"Fix"},{"location":"CHANGELOG/#breaking","text":"auto-populate the Json meta ( 2af3ad2 )","title":"Breaking"},{"location":"CHANGELOG/#documentation","text":"Fix broken links due to multiple versions ( 21f934b ) Change accent color to teal ( cb96481 ) See all commits in this version","title":"Documentation"},{"location":"CHANGELOG/#v110-2021-06-17","text":"","title":"v1.1.0 (2021-06-17)"},{"location":"CHANGELOG/#feature_1","text":"Client retrieve credentials from env ( d5f52e7 )","title":"Feature"},{"location":"CHANGELOG/#documentation_1","text":"Multiple versions via mike ( a6cdd45 ) Add Documentation url to PyPI page ( 7b7389d ) Fix broken link to features section ( 07cf730 ) Fix broken links ( 1e54c48 ) Uppercase CHANGELOG.md and LICENSE.md ( 592be6e ) See all commits in this version","title":"Documentation"},{"location":"CHANGELOG/#v100-2021-06-09","text":"","title":"v1.0.0 (2021-06-09)"},{"location":"CHANGELOG/#fix_1","text":"Convert Album.cover to a cached_property ( 6777ad3 )","title":"Fix"},{"location":"CHANGELOG/#breaking_1","text":"convert internal modules into protected ( b7bc5a8 )","title":"Breaking"},{"location":"CHANGELOG/#documentation_2","text":"Correctly indent nested lists in .md files ( 5caa257 ) Add Playlist documentation ( 44d961d ) Add Album documentation ( 7cbf3bc ) Add Track documentation ( 29c48a1 ) Fix codeclimate urls ( c42a775 ) Model.context do not throw TypeError during mkdocs build ( da80a51 ) See all commits in this version","title":"Documentation"},{"location":"CHANGELOG/#v039-2021-05-31","text":"","title":"v0.3.9 (2021-05-31)"},{"location":"CHANGELOG/#fix_2","text":"Raise NotFound instead of HTTPError ( e4c83da )","title":"Fix"},{"location":"CHANGELOG/#documentation_3","text":"Uppercase filenames ( b679f5b ) Remove folder references ( e699080 ) Fix broken urls ( 66c7f12 ) README.md: Center aligned badges ( 4539453 ) logo.png: Enlarged ( f9e939d ) CONTRIBUTING.md: Removed toc ( 4ebb5f9 ) Added license ( 637bbc2 ) Added contributing ( d2bed00 ) Added code of conduct ( de0bcfe ) Added changelog ( dfe478d ) Added logo ( 43eec65 ) CONTRIBUTING.md: Mentioning examples ( aa16fcf ) CONTRIBUTING.md: Added pyenv section in testing with tox ( 6986af0 ) tests: Added a README ( 437ee1f ) Create .all-contributorsrc [skip ci] ( 043e974 ) Update README.md [skip ci] ( 0847fd3 ) mkdocs.yml: Corrected edit_uri ( 491a49b ) See all commits in this version","title":"Documentation"},{"location":"CHANGELOG/#v038-2021-05-01","text":"","title":"v0.3.8 (2021-05-01)"},{"location":"CHANGELOG/#fix_3","text":"model.py: context now does not throw ( 82f93d9 )","title":"Fix"},{"location":"CHANGELOG/#documentation_4","text":"README.md: Added docs link & badge ( 42d4abe ) See all commits in this version","title":"Documentation"},{"location":"CHANGELOG/#v035-2021-04-27","text":"","title":"v0.3.5 (2021-04-27)"},{"location":"CHANGELOG/#fix_4","text":"publish.yml: Publishing via another gh-action ( 8487eb7 ) See all commits in this version","title":"Fix"},{"location":"CHANGELOG/#v015-2021-04-17","text":"","title":"v0.1.5 (2021-04-17)"},{"location":"CHANGELOG/#feature_2","text":"Enabled automatic releases via GitHub Actions Enabled automatic Changelog generation via GitHub Actions See all commits in this version","title":"Feature"},{"location":"CHANGELOG/#v014-2021-04-17","text":"\ud83c\udf82\ud83c\udf89 Initial Release \ud83c\udf82\ud83c\udf89","title":"v0.1.4 (2021-04-17)"},{"location":"CODE_OF_CONDUCT/","text":"Contributor Covenant Code of Conduct \u00a4 Our Pledge \u00a4 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00a4 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00a4 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00a4 This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00a4 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting one of the project maintainers listed below. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Project Maintainers \u00a4 Vasilis Sioros < billsioros97@gmail.com > Attribution \u00a4 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code Of Conduct"},{"location":"CODE_OF_CONDUCT/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"CODE_OF_CONDUCT/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"CODE_OF_CONDUCT/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"CODE_OF_CONDUCT/#scope","text":"This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"CODE_OF_CONDUCT/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting one of the project maintainers listed below. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"CODE_OF_CONDUCT/#project-maintainers","text":"Vasilis Sioros < billsioros97@gmail.com >","title":"Project Maintainers"},{"location":"CODE_OF_CONDUCT/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"CONTRIBUTING/","text":"Contributing \u00a4 Hello and thank you for considering contributing to Dotify ! Reading and following these guidelines will help us make the contribution process easy and effective for everyone involved. This project follows the all-contributors specification. You can read more here . Code of Conduct \u00a4 By participating and contributing to this project, you agree to uphold our Code of Conduct . Getting Help \u00a4 In case all you need is an answer to a question, please refrain from opening an issue and instead visit the project's discussion page . Getting Started \u00a4 Contributions are made to this repository via Issues and Pull Requests (PRs). A few general guidelines that cover both: Search for existing Issues and PRs before creating your own. We work hard to make sure issues are handled in a timely manner but, depending on the impact, it could take a while to investigate the root cause. A friendly ping in the comment thread to the submitter or a contributor can help draw attention if your issue is blocking. Issues \u00a4 Issues should be used to report problems with the library or request a new feature or documentation change. When you create a new Issue, a template will be loaded that will guide you through collecting and providing the required information. If you find an Issue that addresses the problem you're having, please add your own reproduction information to the existing issue rather than creating a new one. Adding a reaction can also help in indicating to our maintainers that a particular problem is affecting more than just the reporter. Pull Requests \u00a4 PRs can be a quick way to get your fix or improvement slated for the next release. In general, PRs should: Only fix/add the functionality in question OR address wide-spread whitespace/style issues, not both. Address a single concern in the least number of changed lines as possible. Be accompanied by a complete Pull Request template (loaded automatically when a PR is created). Add unit or integration tests for added or changed functionality. Any code related changes should be accompanied by corresponding changes to the project's documentation. If your pull request introduces a new feature, the corresponding README section must be updated to reflect this. Make sure you also include an example , showcasing this new functionality. Write clear, concise commit message(s) using the Conventional Commits format. Why? This project only accepts pull requests related to open issues. In case there is no relevant open issue, feel free to create one . For changes that address core functionality or would require breaking changes (e.g. a major release), it's best to open an Issue to discuss your proposal first. This is not required but can save time creating and reviewing changes. In general, we follow the \"fork-and-pull\" Git workflow Fork the repository to your own Github account Clone the project to your machine Create a branch locally with a succinct but descriptive name Commit changes to the branch Push changes to your fork Open a PR in our repository and follow the PR template so that we can efficiently review the changes Setting up a local development environment \u00a4 The following sections assume that you have already locally cloned the repository . Installing Poetry \u00a4 The Dotify project utilizes the Poetry Python package manager. Having installed Poetry in the global namespace you may now run poetry shell to create a brand new virtual environment and poetry install , in order to install the project's dependencies (development dependencies as well). Creating & Using Spotify client credentials \u00a4 Start by visiting the Spotify Developer Portal and creating an account. You are also required to create a Spotify client ID , which you will be using during development. You may reed more here . Installing pre-commit hooks \u00a4 The project utilizes the pre-commit framework. Having created a virtual environment and installed the required dependencies , you may run pre-commit install to install the git hook scripts . Formatting, Linting and Testing \u00a4 All of the above can be done via tox : You can lint the code by simply running tox -e lint Checking for type errors, using Mypy , can be achieved via tox -e type-check Checking if your changes follow the project's formatting standard can be done via tox -e fmt-check You may run tox -e py38 in order to run the library's unit tests using Python 3.8 (the py37 , py38 and py39 test environments assumes that you have Python 3.7, 3.8 or 3.9 installed) Alternatively, you may simply run tox to execute all of the above Note that in order to run the test suite, you must export your client credentials beforehand, as such export SPOTIFY_ID = \"<SPOTIFY_ID>\" export SPOTIFY_SECRET = \"<SPOTIFY_SECRET>\" You may also utilize direnv , in order to avoid re-exporting them every time you spawn a new shell instance. ATTENTION : Even though, using a .envrc file is far more convenient than re-exporting environment variables each and every time you open up a new shell, it is strongly recommended that, you prefer the first approach as you risk compromising your client credentials otherwise. (Optional) Installing pyenv \u00a4 pyenv is used, in the context of the Dotify project, in order to determine the project's compatibility with various versions of Python. Installing pyenv is not strictly required, but it is strongly recommended. Having installed pyenv in the global namespace, you may now run the following snippet, in order to install Python 3.7, 3.8 and 3.9, which, at the time of writing this document, are the only Python versions, supported by Dotify . pyenv install 3 .7.10 3 .8.9 3 .9.4 pyenv local 3 .7.10 3 .8.9 3 .9.4 You will now be able to run tox (an as a result any test environment subset py3[7|8|9] ), without any test environment being skipped due to skip_missing_interpreters . Feel free to read more about using pyenv , in the context of poetry , here . Documenting your changes \u00a4 Dotify utilizes MkDocs to build and deploy its documentation to GitHub Pages . The documentation is auto-generated from the python docstrings throughout the source code. As a result, any code related change should be accompanied by a corresponding change to the method / class at hand. Having made your changes, please run mkdocs server and make sure that no error is being raised and the documentation renders fine. Writing your commit message \u00a4 The project's version number and Changelog , depend on a consistent commit history. As a result, your commit message's format is extremely important. Before opening a pull request, please make sure that your commits strictly follow the Conventional Commits format]. Creating a pull request \u00a4 Make sure you review our Pull Request Guidelines , before initiating a PR.","title":"Contributing Guidelines"},{"location":"CONTRIBUTING/#contributing","text":"Hello and thank you for considering contributing to Dotify ! Reading and following these guidelines will help us make the contribution process easy and effective for everyone involved. This project follows the all-contributors specification. You can read more here .","title":"Contributing"},{"location":"CONTRIBUTING/#code-of-conduct","text":"By participating and contributing to this project, you agree to uphold our Code of Conduct .","title":"Code of Conduct"},{"location":"CONTRIBUTING/#getting-help","text":"In case all you need is an answer to a question, please refrain from opening an issue and instead visit the project's discussion page .","title":"Getting Help"},{"location":"CONTRIBUTING/#getting-started","text":"Contributions are made to this repository via Issues and Pull Requests (PRs). A few general guidelines that cover both: Search for existing Issues and PRs before creating your own. We work hard to make sure issues are handled in a timely manner but, depending on the impact, it could take a while to investigate the root cause. A friendly ping in the comment thread to the submitter or a contributor can help draw attention if your issue is blocking.","title":"Getting Started"},{"location":"CONTRIBUTING/#issues","text":"Issues should be used to report problems with the library or request a new feature or documentation change. When you create a new Issue, a template will be loaded that will guide you through collecting and providing the required information. If you find an Issue that addresses the problem you're having, please add your own reproduction information to the existing issue rather than creating a new one. Adding a reaction can also help in indicating to our maintainers that a particular problem is affecting more than just the reporter.","title":"Issues"},{"location":"CONTRIBUTING/#pull-requests","text":"PRs can be a quick way to get your fix or improvement slated for the next release. In general, PRs should: Only fix/add the functionality in question OR address wide-spread whitespace/style issues, not both. Address a single concern in the least number of changed lines as possible. Be accompanied by a complete Pull Request template (loaded automatically when a PR is created). Add unit or integration tests for added or changed functionality. Any code related changes should be accompanied by corresponding changes to the project's documentation. If your pull request introduces a new feature, the corresponding README section must be updated to reflect this. Make sure you also include an example , showcasing this new functionality. Write clear, concise commit message(s) using the Conventional Commits format. Why? This project only accepts pull requests related to open issues. In case there is no relevant open issue, feel free to create one . For changes that address core functionality or would require breaking changes (e.g. a major release), it's best to open an Issue to discuss your proposal first. This is not required but can save time creating and reviewing changes. In general, we follow the \"fork-and-pull\" Git workflow Fork the repository to your own Github account Clone the project to your machine Create a branch locally with a succinct but descriptive name Commit changes to the branch Push changes to your fork Open a PR in our repository and follow the PR template so that we can efficiently review the changes","title":"Pull Requests"},{"location":"CONTRIBUTING/#setting-up-a-local-development-environment","text":"The following sections assume that you have already locally cloned the repository .","title":"Setting up a local development environment"},{"location":"CONTRIBUTING/#installing-poetry","text":"The Dotify project utilizes the Poetry Python package manager. Having installed Poetry in the global namespace you may now run poetry shell to create a brand new virtual environment and poetry install , in order to install the project's dependencies (development dependencies as well).","title":"Installing Poetry"},{"location":"CONTRIBUTING/#creating-using-spotify-client-credentials","text":"Start by visiting the Spotify Developer Portal and creating an account. You are also required to create a Spotify client ID , which you will be using during development. You may reed more here .","title":"Creating &amp; Using Spotify client credentials"},{"location":"CONTRIBUTING/#installing-pre-commit-hooks","text":"The project utilizes the pre-commit framework. Having created a virtual environment and installed the required dependencies , you may run pre-commit install to install the git hook scripts .","title":"Installing pre-commit hooks"},{"location":"CONTRIBUTING/#formatting-linting-and-testing","text":"All of the above can be done via tox : You can lint the code by simply running tox -e lint Checking for type errors, using Mypy , can be achieved via tox -e type-check Checking if your changes follow the project's formatting standard can be done via tox -e fmt-check You may run tox -e py38 in order to run the library's unit tests using Python 3.8 (the py37 , py38 and py39 test environments assumes that you have Python 3.7, 3.8 or 3.9 installed) Alternatively, you may simply run tox to execute all of the above Note that in order to run the test suite, you must export your client credentials beforehand, as such export SPOTIFY_ID = \"<SPOTIFY_ID>\" export SPOTIFY_SECRET = \"<SPOTIFY_SECRET>\" You may also utilize direnv , in order to avoid re-exporting them every time you spawn a new shell instance. ATTENTION : Even though, using a .envrc file is far more convenient than re-exporting environment variables each and every time you open up a new shell, it is strongly recommended that, you prefer the first approach as you risk compromising your client credentials otherwise.","title":"Formatting, Linting and Testing"},{"location":"CONTRIBUTING/#optional-installing-pyenv","text":"pyenv is used, in the context of the Dotify project, in order to determine the project's compatibility with various versions of Python. Installing pyenv is not strictly required, but it is strongly recommended. Having installed pyenv in the global namespace, you may now run the following snippet, in order to install Python 3.7, 3.8 and 3.9, which, at the time of writing this document, are the only Python versions, supported by Dotify . pyenv install 3 .7.10 3 .8.9 3 .9.4 pyenv local 3 .7.10 3 .8.9 3 .9.4 You will now be able to run tox (an as a result any test environment subset py3[7|8|9] ), without any test environment being skipped due to skip_missing_interpreters . Feel free to read more about using pyenv , in the context of poetry , here .","title":"(Optional) Installing pyenv"},{"location":"CONTRIBUTING/#documenting-your-changes","text":"Dotify utilizes MkDocs to build and deploy its documentation to GitHub Pages . The documentation is auto-generated from the python docstrings throughout the source code. As a result, any code related change should be accompanied by a corresponding change to the method / class at hand. Having made your changes, please run mkdocs server and make sure that no error is being raised and the documentation renders fine.","title":"Documenting your changes"},{"location":"CONTRIBUTING/#writing-your-commit-message","text":"The project's version number and Changelog , depend on a consistent commit history. As a result, your commit message's format is extremely important. Before opening a pull request, please make sure that your commits strictly follow the Conventional Commits format].","title":"Writing your commit message"},{"location":"CONTRIBUTING/#creating-a-pull-request","text":"Make sure you review our Pull Request Guidelines , before initiating a PR.","title":"Creating a pull request"},{"location":"LICENSE/","text":"MIT License Copyright (c) 2021-2021 Vasileios Sioros (billsioros) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"dotify/","text":"Documentation for Dotify \u00a4 A subclass of spotipy.Spotify , which provides a more object oriented interface. Examples: >>> from dotify import Dotify ... with Dotify ( spotify_client , spotify_secret ): ... for result in Track . search ( query ): ... ... __init__ ( self , client_id = None , client_secret = None ) special \u00a4 Create a Dotify instance. If no client_id and/or client_secret are provided, an environment variable look up is performed for the names SPOTIFY_ID and/or SPOTIFY_SECRET . Parameters: Name Type Description Default client_id Optional[str] your Spotify API client ID. Defaults to None None client_secret Optional[str] your Spotify API client secret. Defaults to None None search ( self , model_type , query , limit = 1 ) \u00a4 Perform a Spotify search given a query . Parameters: Name Type Description Default model_type str One of 'artist', 'album', 'track', 'playlist' required query ~AnyStr the search query required limit Optional[int] the number of items to return. Defaults to 1. 1 Returns: Type Description List[Dict[~AnyStr, Any]] List[Dict[AnyStr, Any]]: A list containing the search results","title":"Dotify"},{"location":"dotify/#documentation-for-dotify","text":"A subclass of spotipy.Spotify , which provides a more object oriented interface. Examples: >>> from dotify import Dotify ... with Dotify ( spotify_client , spotify_secret ): ... for result in Track . search ( query ): ... ...","title":"Documentation for Dotify"},{"location":"dotify/#dotify._dotify.Dotify.__init__","text":"Create a Dotify instance. If no client_id and/or client_secret are provided, an environment variable look up is performed for the names SPOTIFY_ID and/or SPOTIFY_SECRET . Parameters: Name Type Description Default client_id Optional[str] your Spotify API client ID. Defaults to None None client_secret Optional[str] your Spotify API client secret. Defaults to None None","title":"__init__()"},{"location":"dotify/#dotify._dotify.Dotify.search","text":"Perform a Spotify search given a query . Parameters: Name Type Description Default model_type str One of 'artist', 'album', 'track', 'playlist' required query ~AnyStr the search query required limit Optional[int] the number of items to return. Defaults to 1. 1 Returns: Type Description List[Dict[~AnyStr, Any]] List[Dict[AnyStr, Any]]: A list containing the search results","title":"search()"},{"location":"model/","text":"Documentation for Dotify \u00a4 The base class for every Spotify Web API entity. InvalidURL \u00a4 An exception thrown if the provided URL does not correspond to a valid Spotify URL. NotFound \u00a4 An exception thrown if an operation fails to retrieve the necessary information. UnexpectedError \u00a4 An exception indicating an unexpected error. http_safeguard ( method ) classmethod \u00a4 Convert HTTP exceptions thrown by the decorated method to Model level exceptions. Parameters: Name Type Description Default method Callable[..., Any] the method being decorated required Returns: Type Description Callable[..., Any] Callable[..., Any]: the decorated method search ( query , limit = 1 ) classmethod \u00a4 Perform a Spotify search given a query . Parameters: Name Type Description Default query ~AnyStr the search query required limit Optional[int] the number of items to return. Defaults to 1. 1 Exceptions: Type Description NotFound In case no results corresponding to the provided query are found Returns: Type Description Iterator[Model] Iterator[\"Model\"]: the Model instances corresponding to the query validate_url ( method ) classmethod \u00a4 Validate the URL supplied to the decorated method. Parameters: Name Type Description Default method Callable[..., Any] the method being decorated required Returns: Type Description Callable[..., Any] Callable[..., Any]: the decorated method view_name () classmethod \u00a4 Return the name of the Spotify view corresponding to the Model . Returns: Type Description str str: the name of the Spotify view","title":"Model"},{"location":"model/#documentation-for-dotify","text":"The base class for every Spotify Web API entity.","title":"Documentation for Dotify"},{"location":"model/#dotify._model.Model.InvalidURL","text":"An exception thrown if the provided URL does not correspond to a valid Spotify URL.","title":"InvalidURL"},{"location":"model/#dotify._model.Model.NotFound","text":"An exception thrown if an operation fails to retrieve the necessary information.","title":"NotFound"},{"location":"model/#dotify._model.Model.UnexpectedError","text":"An exception indicating an unexpected error.","title":"UnexpectedError"},{"location":"model/#dotify._model.Model.http_safeguard","text":"Convert HTTP exceptions thrown by the decorated method to Model level exceptions. Parameters: Name Type Description Default method Callable[..., Any] the method being decorated required Returns: Type Description Callable[..., Any] Callable[..., Any]: the decorated method","title":"http_safeguard()"},{"location":"model/#dotify._model.Model.search","text":"Perform a Spotify search given a query . Parameters: Name Type Description Default query ~AnyStr the search query required limit Optional[int] the number of items to return. Defaults to 1. 1 Exceptions: Type Description NotFound In case no results corresponding to the provided query are found Returns: Type Description Iterator[Model] Iterator[\"Model\"]: the Model instances corresponding to the query","title":"search()"},{"location":"model/#dotify._model.Model.validate_url","text":"Validate the URL supplied to the decorated method. Parameters: Name Type Description Default method Callable[..., Any] the method being decorated required Returns: Type Description Callable[..., Any] Callable[..., Any]: the decorated method","title":"validate_url()"},{"location":"model/#dotify._model.Model.view_name","text":"Return the name of the Spotify view corresponding to the Model . Returns: Type Description str str: the name of the Spotify view","title":"view_name()"},{"location":"models/album/","text":"Documentation for Album \u00a4 AlbumBase defines the interface of the Album class, which is subclassing it. artist : Artist property readonly \u00a4 Return the album's artist. Returns: Type Description Artist Artist: an instance of Artist representing the album's artist relevant info tracks : Iterator [ Track ] property readonly \u00a4 Return the album tracks. Yields Iterator[\"Track\"]: the album tracks url : ~ AnyStr property readonly \u00a4 Return the album's Spotify URL. Returns: Type Description ~AnyStr AnyStr: the URL in string format from_url ( cls , url ) classmethod \u00a4 Return an Album given its corresponding Spotify URL. Parameters: Name Type Description Default url ~AnyStr the Spotify URL of the album required Returns: Type Description Album Album: the corresponding album Album implements the album downloading logic. download ( self , path , skip_existing = False , progress_logger = None ) \u00a4 Download the album's tracks in .mp3 format. Parameters: Name Type Description Default path Path where should the tracks be stored required skip_existing Optional[bool] whether or not to overwrite an existing track. Defaults to False False progress_logger Optional[logging.Logger] a logger reporting on the download progress. Defaults to None. None Returns: Type Description Path Path: the download folder of the album","title":"Album"},{"location":"models/album/#documentation-for-album","text":"AlbumBase defines the interface of the Album class, which is subclassing it.","title":"Documentation for Album"},{"location":"models/album/#dotify.models._album.AlbumBase.artist","text":"Return the album's artist. Returns: Type Description Artist Artist: an instance of Artist representing the album's artist relevant info","title":"artist"},{"location":"models/album/#dotify.models._album.AlbumBase.tracks","text":"Return the album tracks. Yields Iterator[\"Track\"]: the album tracks","title":"tracks"},{"location":"models/album/#dotify.models._album.AlbumBase.url","text":"Return the album's Spotify URL. Returns: Type Description ~AnyStr AnyStr: the URL in string format","title":"url"},{"location":"models/album/#dotify.models._album.AlbumBase.from_url","text":"Return an Album given its corresponding Spotify URL. Parameters: Name Type Description Default url ~AnyStr the Spotify URL of the album required Returns: Type Description Album Album: the corresponding album Album implements the album downloading logic.","title":"from_url()"},{"location":"models/album/#dotify.models._album.Album.download","text":"Download the album's tracks in .mp3 format. Parameters: Name Type Description Default path Path where should the tracks be stored required skip_existing Optional[bool] whether or not to overwrite an existing track. Defaults to False False progress_logger Optional[logging.Logger] a logger reporting on the download progress. Defaults to None. None Returns: Type Description Path Path: the download folder of the album","title":"download()"},{"location":"models/playlist/","text":"Documentation for Playlist \u00a4 PlaylistBase defines the interface of the Playlist class, which is subclassing it. tracks : Iterator [ Track ] property readonly \u00a4 Return the playlist tracks. Yields Iterator[\"Track\"]: the playlist tracks url : ~ AnyStr property readonly \u00a4 Return the playlist's Spotify URL. Returns: Type Description ~AnyStr AnyStr: the URL in string format from_url ( cls , url ) classmethod \u00a4 Return a Playlist given its corresponding Spotify URL. Parameters: Name Type Description Default url ~AnyStr the Spotify URL of the playlist required Returns: Type Description Playlist Playlist: the corresponding playlist Playlist implements the playlist downloading logic. download ( self , path , skip_existing = False , progress_logger = None ) \u00a4 Download the playlist's tracks in .mp3 format. Parameters: Name Type Description Default path Path where should the tracks be stored required skip_existing Optional[bool] whether or not to overwrite an existing track. Defaults to False. False progress_logger Optional[logging.Logger] a logger reporting on the download progress. Defaults to None. None Returns: Type Description Path Path: the download folder of the playlist","title":"Playlist"},{"location":"models/playlist/#documentation-for-playlist","text":"PlaylistBase defines the interface of the Playlist class, which is subclassing it.","title":"Documentation for Playlist"},{"location":"models/playlist/#dotify.models._playlist.PlaylistBase.tracks","text":"Return the playlist tracks. Yields Iterator[\"Track\"]: the playlist tracks","title":"tracks"},{"location":"models/playlist/#dotify.models._playlist.PlaylistBase.url","text":"Return the playlist's Spotify URL. Returns: Type Description ~AnyStr AnyStr: the URL in string format","title":"url"},{"location":"models/playlist/#dotify.models._playlist.PlaylistBase.from_url","text":"Return a Playlist given its corresponding Spotify URL. Parameters: Name Type Description Default url ~AnyStr the Spotify URL of the playlist required Returns: Type Description Playlist Playlist: the corresponding playlist Playlist implements the playlist downloading logic.","title":"from_url()"},{"location":"models/playlist/#dotify.models._playlist.Playlist.download","text":"Download the playlist's tracks in .mp3 format. Parameters: Name Type Description Default path Path where should the tracks be stored required skip_existing Optional[bool] whether or not to overwrite an existing track. Defaults to False. False progress_logger Optional[logging.Logger] a logger reporting on the download progress. Defaults to None. None Returns: Type Description Path Path: the download folder of the playlist","title":"download()"},{"location":"models/track/","text":"Documentation for Track \u00a4 TrackBase defines the interface of the Track class, which is subclassing it. artist : Artist property readonly \u00a4 Return the track's artist. Returns: Type Description Artist Artist: an instance of Artist representing the track's artist relevant info genre : Optional [ str ] property readonly \u00a4 Return the track's main genre. Returns: Type Description Optional[str] Optional[str]: the track's main genre genres : List [ str ] property readonly \u00a4 Return the track's genres. Returns: Type Description List[str] List[str]: a list containing the track's genres url : ~ AnyStr property readonly \u00a4 Return the track's Spotify URL. Returns: Type Description ~AnyStr AnyStr: the URL in string format from_url ( cls , url ) classmethod \u00a4 Return a Track given its corresponding Spotify URL. Parameters: Name Type Description Default url ~AnyStr the Spotify URL of the track required Returns: Type Description Track Track: the corresponding track Track implements the track downloading logic. id3_tags : Dict [ str , Any ] property readonly \u00a4 Recover the track's ID3 tags. Returns: Type Description Dict[str, Any] Dict[str, Any]: a dictionary containing the track's ID3 tags stream : Stream property readonly \u00a4 Return the audio stream corresponding to the the top search result. Returns: Type Description Stream Stream: an audio stream of the track as_mp3 ( self , mp3_path , skip_existing = False , progress_logger = None ) \u00a4 Download the track in .mp3 format. Parameters: Name Type Description Default mp3_path Path where should the resulting file be stored required skip_existing Optional[bool] whether or not to overwrite an existing file. Defaults to False. False progress_logger Optional[logging.Logger] a logger reporting on the download progress. Defaults to None. None Returns: Type Description Path Path: the download location of the .mp3 file as_mp4 ( self , mp4_path , skip_existing = False ) \u00a4 Download the track in .mp4 format. Parameters: Name Type Description Default mp4_path Path where should the resulting file be stored required skip_existing Optional[bool] whether or not to overwrite an existing file. Defaults to False. False Exceptions: Type Description NotFound if no audio stream corresponding to the track at hand is found Returns: Type Description Path Path: the download location of the .mp4 file download ( self , mp3_path , skip_existing = False , progress_logger = None ) \u00a4 Download the track in .mp3 format. Parameters: Name Type Description Default mp3_path Path where should the resulting file be stored required skip_existing Optional[bool] whether or not to overwrite an existing file. Defaults to False. False progress_logger Optional[logging.Logger] a logger reporting on the download progress. Defaults to None. None Returns: Type Description Path Path: the download location of the .mp3 file streams ( self , limit = 1 ) \u00a4 Yield the track's corresponding YouTube search results audio streams. Parameters: Name Type Description Default limit Optional[int] the desired number of search result items. Defaults to 1. 1 Yields Iterator[Stream]: yields each one of the search result audio streams","title":"Track"},{"location":"models/track/#documentation-for-track","text":"TrackBase defines the interface of the Track class, which is subclassing it.","title":"Documentation for Track"},{"location":"models/track/#dotify.models._track.TrackBase.artist","text":"Return the track's artist. Returns: Type Description Artist Artist: an instance of Artist representing the track's artist relevant info","title":"artist"},{"location":"models/track/#dotify.models._track.TrackBase.genre","text":"Return the track's main genre. Returns: Type Description Optional[str] Optional[str]: the track's main genre","title":"genre"},{"location":"models/track/#dotify.models._track.TrackBase.genres","text":"Return the track's genres. Returns: Type Description List[str] List[str]: a list containing the track's genres","title":"genres"},{"location":"models/track/#dotify.models._track.TrackBase.url","text":"Return the track's Spotify URL. Returns: Type Description ~AnyStr AnyStr: the URL in string format","title":"url"},{"location":"models/track/#dotify.models._track.TrackBase.from_url","text":"Return a Track given its corresponding Spotify URL. Parameters: Name Type Description Default url ~AnyStr the Spotify URL of the track required Returns: Type Description Track Track: the corresponding track Track implements the track downloading logic.","title":"from_url()"},{"location":"models/track/#dotify.models._track.Track.id3_tags","text":"Recover the track's ID3 tags. Returns: Type Description Dict[str, Any] Dict[str, Any]: a dictionary containing the track's ID3 tags","title":"id3_tags"},{"location":"models/track/#dotify.models._track.Track.stream","text":"Return the audio stream corresponding to the the top search result. Returns: Type Description Stream Stream: an audio stream of the track","title":"stream"},{"location":"models/track/#dotify.models._track.Track.as_mp3","text":"Download the track in .mp3 format. Parameters: Name Type Description Default mp3_path Path where should the resulting file be stored required skip_existing Optional[bool] whether or not to overwrite an existing file. Defaults to False. False progress_logger Optional[logging.Logger] a logger reporting on the download progress. Defaults to None. None Returns: Type Description Path Path: the download location of the .mp3 file","title":"as_mp3()"},{"location":"models/track/#dotify.models._track.Track.as_mp4","text":"Download the track in .mp4 format. Parameters: Name Type Description Default mp4_path Path where should the resulting file be stored required skip_existing Optional[bool] whether or not to overwrite an existing file. Defaults to False. False Exceptions: Type Description NotFound if no audio stream corresponding to the track at hand is found Returns: Type Description Path Path: the download location of the .mp4 file","title":"as_mp4()"},{"location":"models/track/#dotify.models._track.Track.download","text":"Download the track in .mp3 format. Parameters: Name Type Description Default mp3_path Path where should the resulting file be stored required skip_existing Optional[bool] whether or not to overwrite an existing file. Defaults to False. False progress_logger Optional[logging.Logger] a logger reporting on the download progress. Defaults to None. None Returns: Type Description Path Path: the download location of the .mp3 file","title":"download()"},{"location":"models/track/#dotify.models._track.Track.streams","text":"Yield the track's corresponding YouTube search results audio streams. Parameters: Name Type Description Default limit Optional[int] the desired number of search result items. Defaults to 1. 1 Yields Iterator[Stream]: yields each one of the search result audio streams","title":"streams()"}]}