{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83d\udea7 The project is currently under heavy development \ud83d\udea7 Example Usage \u00a4 >>> from dotify import Dotify , Track >>> with Dotify ( SPOTIFY_ID , SPOTIFY_SECRET ): >>> result = next ( Track . search ( \"SAINt JHN 5 Thousand Singles\" , limit = 1 )) >>> result < Track \"SAINt JHN - 5 Thousand Singles\" > >>> result . url 'https://open.spotify.com/track/0fFWxRZGKR7HDW2xBMOZgW' >>> result . download ( \"SAINt JHN - 5 Thousand Singles.mp3\" ) PosixPath ( 'SAINt JHN - 5 Thousand Singles.mp3' ) Feel free to check the examples folder for more use case! Features \u00a4 Searching for Tracks Playlists Albums Downloading Tracks Playlists Albums Documentation \u00a4 The project's documentation can be found here . Installation \u00a4 pip install dotify Contributing \u00a4 If you would like to contribute to the project, please go through the Contributing Guidelines first. Contributors \u2728 \u00a4 Thanks goes to these wonderful people ( emoji key ): Vasilis Sioros \ud83d\udea7 \ud83d\udcc6 \ud83d\udcd6 This project follows the all-contributors specification. Contributions of any kind welcome!","title":"Overview"},{"location":"#example-usage","text":">>> from dotify import Dotify , Track >>> with Dotify ( SPOTIFY_ID , SPOTIFY_SECRET ): >>> result = next ( Track . search ( \"SAINt JHN 5 Thousand Singles\" , limit = 1 )) >>> result < Track \"SAINt JHN - 5 Thousand Singles\" > >>> result . url 'https://open.spotify.com/track/0fFWxRZGKR7HDW2xBMOZgW' >>> result . download ( \"SAINt JHN - 5 Thousand Singles.mp3\" ) PosixPath ( 'SAINt JHN - 5 Thousand Singles.mp3' ) Feel free to check the examples folder for more use case!","title":"Example Usage"},{"location":"#features","text":"Searching for Tracks Playlists Albums Downloading Tracks Playlists Albums","title":"Features"},{"location":"#documentation","text":"The project's documentation can be found here .","title":"Documentation"},{"location":"#installation","text":"pip install dotify","title":"Installation"},{"location":"#contributing","text":"If you would like to contribute to the project, please go through the Contributing Guidelines first.","title":"Contributing"},{"location":"#contributors","text":"Thanks goes to these wonderful people ( emoji key ): Vasilis Sioros \ud83d\udea7 \ud83d\udcc6 \ud83d\udcd6 This project follows the all-contributors specification. Contributions of any kind welcome!","title":"Contributors \u2728"},{"location":"decorators/","text":"","title":"Decorators"},{"location":"dotify/","text":"Documentation for Dotify \u00a4 Examples: >>> from dotify import Dotify ... with Dotify ( spotify_client , spotify_secret ): ... for result in Track . search ( query ): ... ... __init__ ( self , client_id , client_secret ) special \u00a4 Create a Dotify instance Parameters: Name Type Description Default client_id str your Spotify API client ID required client_secret str your Spotify API client secret required get_context () classmethod \u00a4 Get the topmost context from the stack Exceptions: Type Description TypeError if the context stack is empty Returns: Type Description Dotify Dotify: the topmost context get_contexts () classmethod \u00a4 Get the Dotify context stack Returns: Type Description List[Dotify] List[Dotify]: the Dotify context stack search ( self , type , query , limit = 1 ) \u00a4 Perform a Spotify search given a query Parameters: Name Type Description Default type str One of 'artist', 'album', 'track', 'playlist' required query str the search query required limit int the number of items to return. Defaults to 1. 1 Returns: Type Description List[Dict[str, Any]] List[Dict[str, Any]]: A list containing the search results","title":"Dotify"},{"location":"dotify/#documentation-for-dotify","text":"Examples: >>> from dotify import Dotify ... with Dotify ( spotify_client , spotify_secret ): ... for result in Track . search ( query ): ... ...","title":"Documentation for Dotify"},{"location":"dotify/#dotify.dotify.Dotify.__init__","text":"Create a Dotify instance Parameters: Name Type Description Default client_id str your Spotify API client ID required client_secret str your Spotify API client secret required","title":"__init__()"},{"location":"dotify/#dotify.dotify.Dotify.get_context","text":"Get the topmost context from the stack Exceptions: Type Description TypeError if the context stack is empty Returns: Type Description Dotify Dotify: the topmost context","title":"get_context()"},{"location":"dotify/#dotify.dotify.Dotify.get_contexts","text":"Get the Dotify context stack Returns: Type Description List[Dotify] List[Dotify]: the Dotify context stack","title":"get_contexts()"},{"location":"dotify/#dotify.dotify.Dotify.search","text":"Perform a Spotify search given a query Parameters: Name Type Description Default type str One of 'artist', 'album', 'track', 'playlist' required query str the search query required limit int the number of items to return. Defaults to 1. 1 Returns: Type Description List[Dict[str, Any]] List[Dict[str, Any]]: A list containing the search results","title":"search()"},{"location":"json_serializable/","text":"","title":"Json serializable"},{"location":"model/","text":"","title":"Model"},{"location":"models/album/","text":"Documentation for Album \u00a4","title":"Album"},{"location":"models/album/#documentation-for-album","text":"","title":"Documentation for Album"},{"location":"models/playlist/","text":"Documentation for Playlist \u00a4","title":"Playlist"},{"location":"models/playlist/#documentation-for-playlist","text":"","title":"Documentation for Playlist"},{"location":"models/track/","text":"Documentation for Track \u00a4","title":"Track"},{"location":"models/track/#documentation-for-track","text":"","title":"Documentation for Track"}]}