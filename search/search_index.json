{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83d\udea7 The project is currently under heavy development \ud83d\udea7 Example Usage \u00a4 >>> from dotify import Dotify , Track >>> with Dotify ( SPOTIFY_ID , SPOTIFY_SECRET ): >>> result = next ( Track . search ( \"SAINt JHN 5 Thousand Singles\" , limit = 1 )) >>> result < Track \"SAINt JHN - 5 Thousand Singles\" > >>> result . url 'https://open.spotify.com/track/0fFWxRZGKR7HDW2xBMOZgW' >>> result . download ( \"SAINt JHN - 5 Thousand Singles.mp3\" ) PosixPath ( 'SAINt JHN - 5 Thousand Singles.mp3' ) Feel free to check the examples folder for more use cases! Features \u00a4 Searching for Tracks Playlists Albums Downloading Tracks Playlists Albums Documentation \u00a4 The project's documentation can be found here . Installation \u00a4 pip install dotify Contributing \u00a4 If you would like to contribute to the project, please go through the Contributing Guidelines first. Contributors \u2728 \u00a4 Thanks goes to these wonderful people ( emoji key ): Vasilis Sioros \ud83d\udea7 \ud83d\udcc6 \ud83d\udcd6 This project follows the all-contributors specification. Contributions of any kind welcome!","title":"Overview"},{"location":"#example-usage","text":">>> from dotify import Dotify , Track >>> with Dotify ( SPOTIFY_ID , SPOTIFY_SECRET ): >>> result = next ( Track . search ( \"SAINt JHN 5 Thousand Singles\" , limit = 1 )) >>> result < Track \"SAINt JHN - 5 Thousand Singles\" > >>> result . url 'https://open.spotify.com/track/0fFWxRZGKR7HDW2xBMOZgW' >>> result . download ( \"SAINt JHN - 5 Thousand Singles.mp3\" ) PosixPath ( 'SAINt JHN - 5 Thousand Singles.mp3' ) Feel free to check the examples folder for more use cases!","title":"Example Usage"},{"location":"#features","text":"Searching for Tracks Playlists Albums Downloading Tracks Playlists Albums","title":"Features"},{"location":"#documentation","text":"The project's documentation can be found here .","title":"Documentation"},{"location":"#installation","text":"pip install dotify","title":"Installation"},{"location":"#contributing","text":"If you would like to contribute to the project, please go through the Contributing Guidelines first.","title":"Contributing"},{"location":"#contributors","text":"Thanks goes to these wonderful people ( emoji key ): Vasilis Sioros \ud83d\udea7 \ud83d\udcc6 \ud83d\udcd6 This project follows the all-contributors specification. Contributions of any kind welcome!","title":"Contributors \u2728"},{"location":"changelog/","text":"Changelog \u00a4 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . v0.3.8 (2021-05-01) \u00a4 Fix \u00a4 model.py: context now does not throw ( 82f93d9 ) Documentation \u00a4 README.md: Added docs link & badge ( 42d4abe ) See all commits in this version v0.3.5 (2021-04-27) \u00a4 Fix \u00a4 publish.yml: Publishing via another gh-action ( 8487eb7 ) See all commits in this version v0.1.5 (2021-04-17) \u00a4 Feature \u00a4 Enabled automatic releases via GitHub Actions Enabled automatic Changelog generation via GitHub Actions See all commits in this version v0.1.4 (2021-04-17) \u00a4 \ud83c\udf82\ud83c\udf89 Initial Release \ud83c\udf82\ud83c\udf89","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#v038-2021-05-01","text":"","title":"v0.3.8 (2021-05-01)"},{"location":"changelog/#fix","text":"model.py: context now does not throw ( 82f93d9 )","title":"Fix"},{"location":"changelog/#documentation","text":"README.md: Added docs link & badge ( 42d4abe ) See all commits in this version","title":"Documentation"},{"location":"changelog/#v035-2021-04-27","text":"","title":"v0.3.5 (2021-04-27)"},{"location":"changelog/#fix_1","text":"publish.yml: Publishing via another gh-action ( 8487eb7 ) See all commits in this version","title":"Fix"},{"location":"changelog/#v015-2021-04-17","text":"","title":"v0.1.5 (2021-04-17)"},{"location":"changelog/#feature","text":"Enabled automatic releases via GitHub Actions Enabled automatic Changelog generation via GitHub Actions See all commits in this version","title":"Feature"},{"location":"changelog/#v014-2021-04-17","text":"\ud83c\udf82\ud83c\udf89 Initial Release \ud83c\udf82\ud83c\udf89","title":"v0.1.4 (2021-04-17)"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00a4 Our Pledge \u00a4 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00a4 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00a4 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00a4 This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00a4 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting one of the project maintainers listed below. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Project Maintainers \u00a4 Vasilis Sioros < billsioros97@gmail.com > Attribution \u00a4 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code Of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting one of the project maintainers listed below. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#project-maintainers","text":"Vasilis Sioros < billsioros97@gmail.com >","title":"Project Maintainers"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"contributing/","text":"Contributing \u00a4 Hello and thank you for considering contributing to Dotify ! Reading and following these guidelines will help us make the contribution process easy and effective for everyone involved. This project follows the all-contributors specification. You can read more here . Code of Conduct \u00a4 By participating and contributing to this project, you agree to uphold our Code of Conduct . Getting Help \u00a4 In case all you need is an answer to a question, please refrain from opening an issue and instead visit the project's discussion page . Getting Started \u00a4 Contributions are made to this repository via Issues and Pull Requests (PRs). A few general guidelines that cover both: Search for existing Issues and PRs before creating your own. We work hard to make sure issues are handled in a timely manner but, depending on the impact, it could take a while to investigate the root cause. A friendly ping in the comment thread to the submitter or a contributor can help draw attention if your issue is blocking. Issues \u00a4 Issues should be used to report problems with the library or request a new feature or documentation change. When you create a new Issue, a template will be loaded that will guide you through collecting and providing the required information. If you find an Issue that addresses the problem you're having, please add your own reproduction information to the existing issue rather than creating a new one. Adding a reaction can also help in indicating to our maintainers that a particular problem is affecting more than just the reporter. Pull Requests \u00a4 PRs can be a quick way to get your fix or improvement slated for the next release. In general, PRs should: Only fix/add the functionality in question OR address wide-spread whitespace/style issues, not both. Address a single concern in the least number of changed lines as possible. Be accompanied by a complete Pull Request template (loaded automatically when a PR is created). Add unit or integration tests for added or changed functionality. Any code related changes should be accompanied by corresponding changes to the project's documentation. If your pull request introduces a new feature, the corresponding README section must be updated to reflect this. Make sure you also include an example , showcasing this new functionality. Write clear, concise commit message(s) using conventional-changelog format . Why? If your PR is connected to an open issue, add a line in your PR's description that says Fixes: #123 , where #123 is the number of the issue you're fixing. For changes that address core functionality or would require breaking changes (e.g. a major release), it's best to open an Issue to discuss your proposal first. This is not required but can save time creating and reviewing changes. In general, we follow the \"fork-and-pull\" Git workflow Fork the repository to your own Github account Clone the project to your machine Create a branch locally with a succinct but descriptive name Commit changes to the branch Push changes to your fork Open a PR in our repository and follow the PR template so that we can efficiently review the changes Setting up a local development environment \u00a4 The following sections assume that you have already locally cloned the repository . Installing Poetry \u00a4 The Dotify project utilizes the Poetry Python package manager. Having installed Poetry in the global namespace you may now run poetry shell to create a brand new virtual environment and poetry install , in order to install the project's dependencies (development dependencies as well). Creating & Using Spotify client credentials \u00a4 Start by visiting the Spotify Developer Portal and creating an account. You are also required to create a Spotify client ID , which you will be using during development. You may reed more here . You can either export the required variables as such export SPOTIFY_ID = \"<SPOTIFY_ID>\" export SPOTIFY_SECRET = \"<SPOTIFY_SECRET>\" or you may also create a a JSON file, of the following format, in the project's root directory. { \"spotify_id\" : \"<SPOTIFY_ID>\" , \"spotify_secret\" : \"<SPOTIFY_SECRET>\" } ATTENTION : Even though, using a JSON file is far more convenient than re-exporting environment variables each and every time you open up a new shell, it is strongly recommended that, you prefer the first approach as you risk compromising your client credentials otherwise. Installing pre-commit hooks \u00a4 The project utilizes the pre-commit framework. Having created a virtual environment and installed the required dependencies , you may run pre-commit install to install the git hook scripts . Formatting, Linting and Testing \u00a4 All of the above can be done via tox : You can lint the code by simply running tox -e lint Checking for type errors, using Mypy , can be achieved via tox -e type-check Checking if your changes follow the project's formatting standard can be done via tox -e fmt-check You may run tox -e py38 in order to run the library's unit tests using Python 3.8 (the py37 , py38 and py39 test environments assumes that you have Python 3.7, 3.8 or 3.9 installed) Alternatively, you may simply run tox to execute all of the above (Optional) Installing pyenv \u00a4 pyenv is used, in the context of the Dotify project, in order to determine the project's compatibility with various versions of Python. Installing pyenv is not strictly required, but it is strongly recommended. Having installed pyenv in the global namespace, you may now run the following snippet, in order to install Python 3.7, 3.8 and 3.9, which, at the time of writing this document, are the only Python versions, supported by Dotify . pyenv install 3 .7.10 3 .8.9 3 .9.4 pyenv local 3 .7.10 3 .8.9 3 .9.4 You will now be able to run tox (an as a result any test environment subset py3[7|8|9] ), without any test environment being skipped due to skip_missing_interpreters . Feel free to read more about using pyenv , in the context of poetry , here . Documenting your changes \u00a4 Dotify utilizes MkDocs to build and deploy its documentation to GitHub Pages . The documentation is auto-generated from the python docstrings throughout the source code. As a result, any code related change should be accompanied by a corresponding change to the method / class at hand. Having made your changes, please run mkdocs server and make sure that no error is being raised and the documentation renders fine. Writing your commit message \u00a4 The project's version number and Changelog , depend on a consistent commit history. As a result, your commit message's format is extremely important. Before opening a pull request, please make sure that your commits strictly follow the conventional-changelog format . Creating a pull request \u00a4 Make sure you review our Pull Request Guidelines , before initiating a PR.","title":"Contributing Guidelines"},{"location":"contributing/#contributing","text":"Hello and thank you for considering contributing to Dotify ! Reading and following these guidelines will help us make the contribution process easy and effective for everyone involved. This project follows the all-contributors specification. You can read more here .","title":"Contributing"},{"location":"contributing/#code-of-conduct","text":"By participating and contributing to this project, you agree to uphold our Code of Conduct .","title":"Code of Conduct"},{"location":"contributing/#getting-help","text":"In case all you need is an answer to a question, please refrain from opening an issue and instead visit the project's discussion page .","title":"Getting Help"},{"location":"contributing/#getting-started","text":"Contributions are made to this repository via Issues and Pull Requests (PRs). A few general guidelines that cover both: Search for existing Issues and PRs before creating your own. We work hard to make sure issues are handled in a timely manner but, depending on the impact, it could take a while to investigate the root cause. A friendly ping in the comment thread to the submitter or a contributor can help draw attention if your issue is blocking.","title":"Getting Started"},{"location":"contributing/#issues","text":"Issues should be used to report problems with the library or request a new feature or documentation change. When you create a new Issue, a template will be loaded that will guide you through collecting and providing the required information. If you find an Issue that addresses the problem you're having, please add your own reproduction information to the existing issue rather than creating a new one. Adding a reaction can also help in indicating to our maintainers that a particular problem is affecting more than just the reporter.","title":"Issues"},{"location":"contributing/#pull-requests","text":"PRs can be a quick way to get your fix or improvement slated for the next release. In general, PRs should: Only fix/add the functionality in question OR address wide-spread whitespace/style issues, not both. Address a single concern in the least number of changed lines as possible. Be accompanied by a complete Pull Request template (loaded automatically when a PR is created). Add unit or integration tests for added or changed functionality. Any code related changes should be accompanied by corresponding changes to the project's documentation. If your pull request introduces a new feature, the corresponding README section must be updated to reflect this. Make sure you also include an example , showcasing this new functionality. Write clear, concise commit message(s) using conventional-changelog format . Why? If your PR is connected to an open issue, add a line in your PR's description that says Fixes: #123 , where #123 is the number of the issue you're fixing. For changes that address core functionality or would require breaking changes (e.g. a major release), it's best to open an Issue to discuss your proposal first. This is not required but can save time creating and reviewing changes. In general, we follow the \"fork-and-pull\" Git workflow Fork the repository to your own Github account Clone the project to your machine Create a branch locally with a succinct but descriptive name Commit changes to the branch Push changes to your fork Open a PR in our repository and follow the PR template so that we can efficiently review the changes","title":"Pull Requests"},{"location":"contributing/#setting-up-a-local-development-environment","text":"The following sections assume that you have already locally cloned the repository .","title":"Setting up a local development environment"},{"location":"contributing/#installing-poetry","text":"The Dotify project utilizes the Poetry Python package manager. Having installed Poetry in the global namespace you may now run poetry shell to create a brand new virtual environment and poetry install , in order to install the project's dependencies (development dependencies as well).","title":"Installing Poetry"},{"location":"contributing/#creating-using-spotify-client-credentials","text":"Start by visiting the Spotify Developer Portal and creating an account. You are also required to create a Spotify client ID , which you will be using during development. You may reed more here . You can either export the required variables as such export SPOTIFY_ID = \"<SPOTIFY_ID>\" export SPOTIFY_SECRET = \"<SPOTIFY_SECRET>\" or you may also create a a JSON file, of the following format, in the project's root directory. { \"spotify_id\" : \"<SPOTIFY_ID>\" , \"spotify_secret\" : \"<SPOTIFY_SECRET>\" } ATTENTION : Even though, using a JSON file is far more convenient than re-exporting environment variables each and every time you open up a new shell, it is strongly recommended that, you prefer the first approach as you risk compromising your client credentials otherwise.","title":"Creating &amp; Using Spotify client credentials"},{"location":"contributing/#installing-pre-commit-hooks","text":"The project utilizes the pre-commit framework. Having created a virtual environment and installed the required dependencies , you may run pre-commit install to install the git hook scripts .","title":"Installing pre-commit hooks"},{"location":"contributing/#formatting-linting-and-testing","text":"All of the above can be done via tox : You can lint the code by simply running tox -e lint Checking for type errors, using Mypy , can be achieved via tox -e type-check Checking if your changes follow the project's formatting standard can be done via tox -e fmt-check You may run tox -e py38 in order to run the library's unit tests using Python 3.8 (the py37 , py38 and py39 test environments assumes that you have Python 3.7, 3.8 or 3.9 installed) Alternatively, you may simply run tox to execute all of the above","title":"Formatting, Linting and Testing"},{"location":"contributing/#optional-installing-pyenv","text":"pyenv is used, in the context of the Dotify project, in order to determine the project's compatibility with various versions of Python. Installing pyenv is not strictly required, but it is strongly recommended. Having installed pyenv in the global namespace, you may now run the following snippet, in order to install Python 3.7, 3.8 and 3.9, which, at the time of writing this document, are the only Python versions, supported by Dotify . pyenv install 3 .7.10 3 .8.9 3 .9.4 pyenv local 3 .7.10 3 .8.9 3 .9.4 You will now be able to run tox (an as a result any test environment subset py3[7|8|9] ), without any test environment being skipped due to skip_missing_interpreters . Feel free to read more about using pyenv , in the context of poetry , here .","title":"(Optional) Installing pyenv"},{"location":"contributing/#documenting-your-changes","text":"Dotify utilizes MkDocs to build and deploy its documentation to GitHub Pages . The documentation is auto-generated from the python docstrings throughout the source code. As a result, any code related change should be accompanied by a corresponding change to the method / class at hand. Having made your changes, please run mkdocs server and make sure that no error is being raised and the documentation renders fine.","title":"Documenting your changes"},{"location":"contributing/#writing-your-commit-message","text":"The project's version number and Changelog , depend on a consistent commit history. As a result, your commit message's format is extremely important. Before opening a pull request, please make sure that your commits strictly follow the conventional-changelog format .","title":"Writing your commit message"},{"location":"contributing/#creating-a-pull-request","text":"Make sure you review our Pull Request Guidelines , before initiating a PR.","title":"Creating a pull request"},{"location":"decorators/","text":"","title":"Decorators"},{"location":"dotify/","text":"Documentation for Dotify \u00a4 Examples: >>> from dotify import Dotify ... with Dotify ( spotify_client , spotify_secret ): ... for result in Track . search ( query ): ... ... __init__ ( self , client_id , client_secret ) special \u00a4 Create a Dotify instance Parameters: Name Type Description Default client_id str your Spotify API client ID required client_secret str your Spotify API client secret required get_context () classmethod \u00a4 Get the topmost context from the stack Exceptions: Type Description TypeError if the context stack is empty Returns: Type Description Dotify Dotify: the topmost context get_contexts () classmethod \u00a4 Get the Dotify context stack Returns: Type Description List[Dotify] List[Dotify]: the Dotify context stack search ( self , type , query , limit = 1 ) \u00a4 Perform a Spotify search given a query Parameters: Name Type Description Default type str One of 'artist', 'album', 'track', 'playlist' required query str the search query required limit int the number of items to return. Defaults to 1. 1 Returns: Type Description List[Dict[str, Any]] List[Dict[str, Any]]: A list containing the search results","title":"Dotify"},{"location":"dotify/#documentation-for-dotify","text":"Examples: >>> from dotify import Dotify ... with Dotify ( spotify_client , spotify_secret ): ... for result in Track . search ( query ): ... ...","title":"Documentation for Dotify"},{"location":"dotify/#dotify.dotify.Dotify.__init__","text":"Create a Dotify instance Parameters: Name Type Description Default client_id str your Spotify API client ID required client_secret str your Spotify API client secret required","title":"__init__()"},{"location":"dotify/#dotify.dotify.Dotify.get_context","text":"Get the topmost context from the stack Exceptions: Type Description TypeError if the context stack is empty Returns: Type Description Dotify Dotify: the topmost context","title":"get_context()"},{"location":"dotify/#dotify.dotify.Dotify.get_contexts","text":"Get the Dotify context stack Returns: Type Description List[Dotify] List[Dotify]: the Dotify context stack","title":"get_contexts()"},{"location":"dotify/#dotify.dotify.Dotify.search","text":"Perform a Spotify search given a query Parameters: Name Type Description Default type str One of 'artist', 'album', 'track', 'playlist' required query str the search query required limit int the number of items to return. Defaults to 1. 1 Returns: Type Description List[Dict[str, Any]] List[Dict[str, Any]]: A list containing the search results","title":"search()"},{"location":"json_serializable/","text":"","title":"Json serializable"},{"location":"license/","text":"MIT License Copyright (c) 2021-2021 Vasileios Sioros (billsioros) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"model/","text":"","title":"Model"},{"location":"models/album/","text":"Documentation for Album \u00a4","title":"Album"},{"location":"models/album/#documentation-for-album","text":"","title":"Documentation for Album"},{"location":"models/playlist/","text":"Documentation for Playlist \u00a4","title":"Playlist"},{"location":"models/playlist/#documentation-for-playlist","text":"","title":"Documentation for Playlist"},{"location":"models/track/","text":"Documentation for Track \u00a4","title":"Track"},{"location":"models/track/#documentation-for-track","text":"","title":"Documentation for Track"}]}